
int map[15][15]; // 0表示空地   1表示黑子  2表示白子
int flag; //2表示白子， 1表示黑子

/*





*/

/*
*	负责人： 组长
	1. 初始化数据
	while(1){
		2. 打印棋盘
		3. 接受用户输入
			接受用户鼠标点击的坐标  根据坐标映射出对应的棋盘下标
		4. 点击了什么
			1. 退出游戏： return；
			2： 点击了棋盘
		5. 判断用户落点在这里会触发什么情况
			0： 这里有棋子了 不能落子
			1： 落子 然后正常运行（没有胜利， 没有满格）
			2： 胜利
			3： 平手（棋盘满了）

		6. 如果是落子， 切换flag的值
			如果是0： 提示用户操作错误  重新操作
			如果是2： 提示胜利
			如果是3： 提示平局
	}

*/
void gameView();
/*
*	负责人： 组长
	绘制棋盘， 0表示空地， 1表示黑子， 2表示白子
*/
void printMap();
/* 
*	负责人： 小林、点燃烟火
	接受用户的点击， 并且根据点击的位置， 返回对应情况
	如果返回值是-1  表示点击了退出按钮
	如果返回值是xxyy， 表示点击了棋盘对应位置
	如果不是以上情况， 继续循环直到用户触发以上情况为止

	返回值：
		-1表示退出游戏界面
		xxyy： 表示用户的落点，
			1212	表示x=12， y=12   
			501		表示x=5  y=1    
			0		表示x=0 y=0
*/
int getUserChoose();

/*
 *
*	万生
	初始化数据
	map： 值全部设为0
	flag： 值设为1
*/
void init();

/*
*	早睡晚起
	落子
	判断棋盘中xy的位置是什么情况
	如果有子  返回0
	如果没子
		落子  并判断是否胜利（判断落子的上下左右， 斜线是否有连5子）
			判断其他格子是否都被占满了
	如果胜利 返回2
	如果都占满  返回3
	否则  正常落子 返回1
		
*/
int fun1(int x, int y);